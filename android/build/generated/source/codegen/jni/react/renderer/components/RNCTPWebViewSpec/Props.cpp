
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GeneratePropsCpp.js
 */

#include <react/renderer/components/RNCTPWebViewSpec/Props.h>
#include <react/renderer/core/PropsParserContext.h>
#include <react/renderer/core/propsConversions.h>

namespace facebook::react {

RNCTPWebViewProps::RNCTPWebViewProps(
    const PropsParserContext &context,
    const RNCTPWebViewProps &sourceProps,
    const RawProps &rawProps): ViewProps(context, sourceProps, rawProps),

    allowFileAccess(convertRawProp(context, rawProps, "allowFileAccess", sourceProps.allowFileAccess, {false})),
    allowsProtectedMedia(convertRawProp(context, rawProps, "allowsProtectedMedia", sourceProps.allowsProtectedMedia, {false})),
    allowsFullscreenVideo(convertRawProp(context, rawProps, "allowsFullscreenVideo", sourceProps.allowsFullscreenVideo, {false})),
    androidLayerType(convertRawProp(context, rawProps, "androidLayerType", sourceProps.androidLayerType, {RNCTPWebViewAndroidLayerType::None})),
    cacheMode(convertRawProp(context, rawProps, "cacheMode", sourceProps.cacheMode, {RNCTPWebViewCacheMode::LOAD_DEFAULT})),
    domStorageEnabled(convertRawProp(context, rawProps, "domStorageEnabled", sourceProps.domStorageEnabled, {false})),
    downloadingMessage(convertRawProp(context, rawProps, "downloadingMessage", sourceProps.downloadingMessage, {})),
    forceDarkOn(convertRawProp(context, rawProps, "forceDarkOn", sourceProps.forceDarkOn, {false})),
    geolocationEnabled(convertRawProp(context, rawProps, "geolocationEnabled", sourceProps.geolocationEnabled, {false})),
    lackPermissionToDownloadMessage(convertRawProp(context, rawProps, "lackPermissionToDownloadMessage", sourceProps.lackPermissionToDownloadMessage, {})),
    messagingModuleName(convertRawProp(context, rawProps, "messagingModuleName", sourceProps.messagingModuleName, {})),
    minimumFontSize(convertRawProp(context, rawProps, "minimumFontSize", sourceProps.minimumFontSize, {0})),
    mixedContentMode(convertRawProp(context, rawProps, "mixedContentMode", sourceProps.mixedContentMode, {RNCTPWebViewMixedContentMode::Never})),
    nestedScrollEnabled(convertRawProp(context, rawProps, "nestedScrollEnabled", sourceProps.nestedScrollEnabled, {false})),
    overScrollMode(convertRawProp(context, rawProps, "overScrollMode", sourceProps.overScrollMode, {})),
    saveFormDataDisabled(convertRawProp(context, rawProps, "saveFormDataDisabled", sourceProps.saveFormDataDisabled, {false})),
    scalesPageToFit(convertRawProp(context, rawProps, "scalesPageToFit", sourceProps.scalesPageToFit, {false})),
    setBuiltInZoomControls(convertRawProp(context, rawProps, "setBuiltInZoomControls", sourceProps.setBuiltInZoomControls, {false})),
    setDisplayZoomControls(convertRawProp(context, rawProps, "setDisplayZoomControls", sourceProps.setDisplayZoomControls, {false})),
    setSupportMultipleWindows(convertRawProp(context, rawProps, "setSupportMultipleWindows", sourceProps.setSupportMultipleWindows, {false})),
    textZoom(convertRawProp(context, rawProps, "textZoom", sourceProps.textZoom, {0})),
    thirdPartyCookiesEnabled(convertRawProp(context, rawProps, "thirdPartyCookiesEnabled", sourceProps.thirdPartyCookiesEnabled, {false})),
    hasOnScroll(convertRawProp(context, rawProps, "hasOnScroll", sourceProps.hasOnScroll, {false})),
    allowingReadAccessToURL(convertRawProp(context, rawProps, "allowingReadAccessToURL", sourceProps.allowingReadAccessToURL, {})),
    allowsBackForwardNavigationGestures(convertRawProp(context, rawProps, "allowsBackForwardNavigationGestures", sourceProps.allowsBackForwardNavigationGestures, {false})),
    allowsInlineMediaPlayback(convertRawProp(context, rawProps, "allowsInlineMediaPlayback", sourceProps.allowsInlineMediaPlayback, {false})),
    allowsPictureInPictureMediaPlayback(convertRawProp(context, rawProps, "allowsPictureInPictureMediaPlayback", sourceProps.allowsPictureInPictureMediaPlayback, {false})),
    allowsAirPlayForMediaPlayback(convertRawProp(context, rawProps, "allowsAirPlayForMediaPlayback", sourceProps.allowsAirPlayForMediaPlayback, {false})),
    allowsLinkPreview(convertRawProp(context, rawProps, "allowsLinkPreview", sourceProps.allowsLinkPreview, {false})),
    automaticallyAdjustContentInsets(convertRawProp(context, rawProps, "automaticallyAdjustContentInsets", sourceProps.automaticallyAdjustContentInsets, {false})),
    autoManageStatusBarEnabled(convertRawProp(context, rawProps, "autoManageStatusBarEnabled", sourceProps.autoManageStatusBarEnabled, {false})),
    bounces(convertRawProp(context, rawProps, "bounces", sourceProps.bounces, {false})),
    contentInset(convertRawProp(context, rawProps, "contentInset", sourceProps.contentInset, {})),
    contentInsetAdjustmentBehavior(convertRawProp(context, rawProps, "contentInsetAdjustmentBehavior", sourceProps.contentInsetAdjustmentBehavior, {RNCTPWebViewContentInsetAdjustmentBehavior::Never})),
    contentMode(convertRawProp(context, rawProps, "contentMode", sourceProps.contentMode, {RNCTPWebViewContentMode::Recommended})),
    dataDetectorTypes(convertRawProp(context, rawProps, "dataDetectorTypes", RNCTPWebViewDataDetectorTypesMaskWrapped{ .value = sourceProps.dataDetectorTypes }, {static_cast<RNCTPWebViewDataDetectorTypesMask>(RNCTPWebViewDataDetectorTypes::PhoneNumber)}).value),
    decelerationRate(convertRawProp(context, rawProps, "decelerationRate", sourceProps.decelerationRate, {0.0})),
    directionalLockEnabled(convertRawProp(context, rawProps, "directionalLockEnabled", sourceProps.directionalLockEnabled, {false})),
    enableApplePay(convertRawProp(context, rawProps, "enableApplePay", sourceProps.enableApplePay, {false})),
    hideKeyboardAccessoryView(convertRawProp(context, rawProps, "hideKeyboardAccessoryView", sourceProps.hideKeyboardAccessoryView, {false})),
    keyboardDisplayRequiresUserAction(convertRawProp(context, rawProps, "keyboardDisplayRequiresUserAction", sourceProps.keyboardDisplayRequiresUserAction, {false})),
    limitsNavigationsToAppBoundDomains(convertRawProp(context, rawProps, "limitsNavigationsToAppBoundDomains", sourceProps.limitsNavigationsToAppBoundDomains, {false})),
    mediaCapturePermissionGrantType(convertRawProp(context, rawProps, "mediaCapturePermissionGrantType", sourceProps.mediaCapturePermissionGrantType, {RNCTPWebViewMediaCapturePermissionGrantType::Prompt})),
    pagingEnabled(convertRawProp(context, rawProps, "pagingEnabled", sourceProps.pagingEnabled, {false})),
    pullToRefreshEnabled(convertRawProp(context, rawProps, "pullToRefreshEnabled", sourceProps.pullToRefreshEnabled, {false})),
    refreshControlLightMode(convertRawProp(context, rawProps, "refreshControlLightMode", sourceProps.refreshControlLightMode, {false})),
    scrollEnabled(convertRawProp(context, rawProps, "scrollEnabled", sourceProps.scrollEnabled, {false})),
    sharedCookiesEnabled(convertRawProp(context, rawProps, "sharedCookiesEnabled", sourceProps.sharedCookiesEnabled, {false})),
    textInteractionEnabled(convertRawProp(context, rawProps, "textInteractionEnabled", sourceProps.textInteractionEnabled, {false})),
    useSharedProcessPool(convertRawProp(context, rawProps, "useSharedProcessPool", sourceProps.useSharedProcessPool, {false})),
    menuItems(convertRawProp(context, rawProps, "menuItems", sourceProps.menuItems, {})),
    suppressMenuItems(convertRawProp(context, rawProps, "suppressMenuItems", sourceProps.suppressMenuItems, {})),
    hasOnFileDownload(convertRawProp(context, rawProps, "hasOnFileDownload", sourceProps.hasOnFileDownload, {false})),
    fraudulentWebsiteWarningEnabled(convertRawProp(context, rawProps, "fraudulentWebsiteWarningEnabled", sourceProps.fraudulentWebsiteWarningEnabled, {false})),
    allowFileAccessFromFileURLs(convertRawProp(context, rawProps, "allowFileAccessFromFileURLs", sourceProps.allowFileAccessFromFileURLs, {false})),
    allowUniversalAccessFromFileURLs(convertRawProp(context, rawProps, "allowUniversalAccessFromFileURLs", sourceProps.allowUniversalAccessFromFileURLs, {false})),
    applicationNameForUserAgent(convertRawProp(context, rawProps, "applicationNameForUserAgent", sourceProps.applicationNameForUserAgent, {})),
    basicAuthCredential(convertRawProp(context, rawProps, "basicAuthCredential", sourceProps.basicAuthCredential, {})),
    cacheEnabled(convertRawProp(context, rawProps, "cacheEnabled", sourceProps.cacheEnabled, {false})),
    incognito(convertRawProp(context, rawProps, "incognito", sourceProps.incognito, {false})),
    injectedJavaScript(convertRawProp(context, rawProps, "injectedJavaScript", sourceProps.injectedJavaScript, {})),
    injectedJavaScriptBeforeContentLoaded(convertRawProp(context, rawProps, "injectedJavaScriptBeforeContentLoaded", sourceProps.injectedJavaScriptBeforeContentLoaded, {})),
    injectedJavaScriptForMainFrameOnly(convertRawProp(context, rawProps, "injectedJavaScriptForMainFrameOnly", sourceProps.injectedJavaScriptForMainFrameOnly, {false})),
    injectedJavaScriptBeforeContentLoadedForMainFrameOnly(convertRawProp(context, rawProps, "injectedJavaScriptBeforeContentLoadedForMainFrameOnly", sourceProps.injectedJavaScriptBeforeContentLoadedForMainFrameOnly, {false})),
    javaScriptCanOpenWindowsAutomatically(convertRawProp(context, rawProps, "javaScriptCanOpenWindowsAutomatically", sourceProps.javaScriptCanOpenWindowsAutomatically, {false})),
    javaScriptEnabled(convertRawProp(context, rawProps, "javaScriptEnabled", sourceProps.javaScriptEnabled, {false})),
    webviewDebuggingEnabled(convertRawProp(context, rawProps, "webviewDebuggingEnabled", sourceProps.webviewDebuggingEnabled, {false})),
    mediaPlaybackRequiresUserAction(convertRawProp(context, rawProps, "mediaPlaybackRequiresUserAction", sourceProps.mediaPlaybackRequiresUserAction, {false})),
    messagingEnabled(convertRawProp(context, rawProps, "messagingEnabled", sourceProps.messagingEnabled, {false})),
    hasOnOpenWindowEvent(convertRawProp(context, rawProps, "hasOnOpenWindowEvent", sourceProps.hasOnOpenWindowEvent, {false})),
    showsHorizontalScrollIndicator(convertRawProp(context, rawProps, "showsHorizontalScrollIndicator", sourceProps.showsHorizontalScrollIndicator, {false})),
    showsVerticalScrollIndicator(convertRawProp(context, rawProps, "showsVerticalScrollIndicator", sourceProps.showsVerticalScrollIndicator, {false})),
    newSource(convertRawProp(context, rawProps, "newSource", sourceProps.newSource, {})),
    userAgent(convertRawProp(context, rawProps, "userAgent", sourceProps.userAgent, {})),
    injectedJavaScriptObject(convertRawProp(context, rawProps, "injectedJavaScriptObject", sourceProps.injectedJavaScriptObject, {})) {}
    
#ifdef RN_SERIALIZABLE_STATE
ComponentName RNCTPWebViewProps::getDiffPropsImplementationTarget() const {
  return "RNCTPWebView";
}

folly::dynamic RNCTPWebViewProps::getDiffProps(
    const Props* prevProps) const {
  static const auto defaultProps = RNCTPWebViewProps();
  const RNCTPWebViewProps* oldProps = prevProps == nullptr
      ? &defaultProps
      : static_cast<const RNCTPWebViewProps*>(prevProps);
  if (this == oldProps) {
    return folly::dynamic::object();
  }
  folly::dynamic result = HostPlatformViewProps::getDiffProps(prevProps);
  
  if (allowFileAccess != oldProps->allowFileAccess) {
    result["allowFileAccess"] = allowFileAccess;
  }
    
  if (allowsProtectedMedia != oldProps->allowsProtectedMedia) {
    result["allowsProtectedMedia"] = allowsProtectedMedia;
  }
    
  if (allowsFullscreenVideo != oldProps->allowsFullscreenVideo) {
    result["allowsFullscreenVideo"] = allowsFullscreenVideo;
  }
    
  if (androidLayerType != oldProps->androidLayerType) {
    result["androidLayerType"] = toDynamic(androidLayerType);
  }
    
  if (cacheMode != oldProps->cacheMode) {
    result["cacheMode"] = toDynamic(cacheMode);
  }
    
  if (domStorageEnabled != oldProps->domStorageEnabled) {
    result["domStorageEnabled"] = domStorageEnabled;
  }
    
  if (downloadingMessage != oldProps->downloadingMessage) {
    result["downloadingMessage"] = downloadingMessage;
  }
    
  if (forceDarkOn != oldProps->forceDarkOn) {
    result["forceDarkOn"] = forceDarkOn;
  }
    
  if (geolocationEnabled != oldProps->geolocationEnabled) {
    result["geolocationEnabled"] = geolocationEnabled;
  }
    
  if (lackPermissionToDownloadMessage != oldProps->lackPermissionToDownloadMessage) {
    result["lackPermissionToDownloadMessage"] = lackPermissionToDownloadMessage;
  }
    
  if (messagingModuleName != oldProps->messagingModuleName) {
    result["messagingModuleName"] = messagingModuleName;
  }
    
  if (minimumFontSize != oldProps->minimumFontSize) {
    result["minimumFontSize"] = minimumFontSize;
  }
    
  if (mixedContentMode != oldProps->mixedContentMode) {
    result["mixedContentMode"] = toDynamic(mixedContentMode);
  }
    
  if (nestedScrollEnabled != oldProps->nestedScrollEnabled) {
    result["nestedScrollEnabled"] = nestedScrollEnabled;
  }
    
  if (overScrollMode != oldProps->overScrollMode) {
    result["overScrollMode"] = overScrollMode;
  }
    
  if (saveFormDataDisabled != oldProps->saveFormDataDisabled) {
    result["saveFormDataDisabled"] = saveFormDataDisabled;
  }
    
  if (scalesPageToFit != oldProps->scalesPageToFit) {
    result["scalesPageToFit"] = scalesPageToFit;
  }
    
  if (setBuiltInZoomControls != oldProps->setBuiltInZoomControls) {
    result["setBuiltInZoomControls"] = setBuiltInZoomControls;
  }
    
  if (setDisplayZoomControls != oldProps->setDisplayZoomControls) {
    result["setDisplayZoomControls"] = setDisplayZoomControls;
  }
    
  if (setSupportMultipleWindows != oldProps->setSupportMultipleWindows) {
    result["setSupportMultipleWindows"] = setSupportMultipleWindows;
  }
    
  if (textZoom != oldProps->textZoom) {
    result["textZoom"] = textZoom;
  }
    
  if (thirdPartyCookiesEnabled != oldProps->thirdPartyCookiesEnabled) {
    result["thirdPartyCookiesEnabled"] = thirdPartyCookiesEnabled;
  }
    
  if (hasOnScroll != oldProps->hasOnScroll) {
    result["hasOnScroll"] = hasOnScroll;
  }
    
  if (allowingReadAccessToURL != oldProps->allowingReadAccessToURL) {
    result["allowingReadAccessToURL"] = allowingReadAccessToURL;
  }
    
  if (allowsBackForwardNavigationGestures != oldProps->allowsBackForwardNavigationGestures) {
    result["allowsBackForwardNavigationGestures"] = allowsBackForwardNavigationGestures;
  }
    
  if (allowsInlineMediaPlayback != oldProps->allowsInlineMediaPlayback) {
    result["allowsInlineMediaPlayback"] = allowsInlineMediaPlayback;
  }
    
  if (allowsPictureInPictureMediaPlayback != oldProps->allowsPictureInPictureMediaPlayback) {
    result["allowsPictureInPictureMediaPlayback"] = allowsPictureInPictureMediaPlayback;
  }
    
  if (allowsAirPlayForMediaPlayback != oldProps->allowsAirPlayForMediaPlayback) {
    result["allowsAirPlayForMediaPlayback"] = allowsAirPlayForMediaPlayback;
  }
    
  if (allowsLinkPreview != oldProps->allowsLinkPreview) {
    result["allowsLinkPreview"] = allowsLinkPreview;
  }
    
  if (automaticallyAdjustContentInsets != oldProps->automaticallyAdjustContentInsets) {
    result["automaticallyAdjustContentInsets"] = automaticallyAdjustContentInsets;
  }
    
  if (autoManageStatusBarEnabled != oldProps->autoManageStatusBarEnabled) {
    result["autoManageStatusBarEnabled"] = autoManageStatusBarEnabled;
  }
    
  if (bounces != oldProps->bounces) {
    result["bounces"] = bounces;
  }
    
  if (contentInset != oldProps->contentInset) {
    result["contentInset"] = toDynamic(contentInset);
  }
    
  if (contentInsetAdjustmentBehavior != oldProps->contentInsetAdjustmentBehavior) {
    result["contentInsetAdjustmentBehavior"] = toDynamic(contentInsetAdjustmentBehavior);
  }
    
  if (contentMode != oldProps->contentMode) {
    result["contentMode"] = toDynamic(contentMode);
  }
    
  if (dataDetectorTypes != oldProps->dataDetectorTypes) {
    result["dataDetectorTypes"] = toDynamic(dataDetectorTypes);
  }
    
  if ((decelerationRate != oldProps->decelerationRate) && !(std::isnan(decelerationRate) && std::isnan(oldProps->decelerationRate))) {
    result["decelerationRate"] = decelerationRate;
  }
    
  if (directionalLockEnabled != oldProps->directionalLockEnabled) {
    result["directionalLockEnabled"] = directionalLockEnabled;
  }
    
  if (enableApplePay != oldProps->enableApplePay) {
    result["enableApplePay"] = enableApplePay;
  }
    
  if (hideKeyboardAccessoryView != oldProps->hideKeyboardAccessoryView) {
    result["hideKeyboardAccessoryView"] = hideKeyboardAccessoryView;
  }
    
  if (keyboardDisplayRequiresUserAction != oldProps->keyboardDisplayRequiresUserAction) {
    result["keyboardDisplayRequiresUserAction"] = keyboardDisplayRequiresUserAction;
  }
    
  if (limitsNavigationsToAppBoundDomains != oldProps->limitsNavigationsToAppBoundDomains) {
    result["limitsNavigationsToAppBoundDomains"] = limitsNavigationsToAppBoundDomains;
  }
    
  if (mediaCapturePermissionGrantType != oldProps->mediaCapturePermissionGrantType) {
    result["mediaCapturePermissionGrantType"] = toDynamic(mediaCapturePermissionGrantType);
  }
    
  if (pagingEnabled != oldProps->pagingEnabled) {
    result["pagingEnabled"] = pagingEnabled;
  }
    
  if (pullToRefreshEnabled != oldProps->pullToRefreshEnabled) {
    result["pullToRefreshEnabled"] = pullToRefreshEnabled;
  }
    
  if (refreshControlLightMode != oldProps->refreshControlLightMode) {
    result["refreshControlLightMode"] = refreshControlLightMode;
  }
    
  if (scrollEnabled != oldProps->scrollEnabled) {
    result["scrollEnabled"] = scrollEnabled;
  }
    
  if (sharedCookiesEnabled != oldProps->sharedCookiesEnabled) {
    result["sharedCookiesEnabled"] = sharedCookiesEnabled;
  }
    
  if (textInteractionEnabled != oldProps->textInteractionEnabled) {
    result["textInteractionEnabled"] = textInteractionEnabled;
  }
    
  if (useSharedProcessPool != oldProps->useSharedProcessPool) {
    result["useSharedProcessPool"] = useSharedProcessPool;
  }
    
  if (menuItems != oldProps->menuItems) {
    result["menuItems"] = toDynamic(menuItems);
  }
    
  if (suppressMenuItems != oldProps->suppressMenuItems) {
    result["suppressMenuItems"] = toDynamic(suppressMenuItems);
  }
    
  if (hasOnFileDownload != oldProps->hasOnFileDownload) {
    result["hasOnFileDownload"] = hasOnFileDownload;
  }
    
  if (fraudulentWebsiteWarningEnabled != oldProps->fraudulentWebsiteWarningEnabled) {
    result["fraudulentWebsiteWarningEnabled"] = fraudulentWebsiteWarningEnabled;
  }
    
  if (allowFileAccessFromFileURLs != oldProps->allowFileAccessFromFileURLs) {
    result["allowFileAccessFromFileURLs"] = allowFileAccessFromFileURLs;
  }
    
  if (allowUniversalAccessFromFileURLs != oldProps->allowUniversalAccessFromFileURLs) {
    result["allowUniversalAccessFromFileURLs"] = allowUniversalAccessFromFileURLs;
  }
    
  if (applicationNameForUserAgent != oldProps->applicationNameForUserAgent) {
    result["applicationNameForUserAgent"] = applicationNameForUserAgent;
  }
    
  if (basicAuthCredential != oldProps->basicAuthCredential) {
    result["basicAuthCredential"] = toDynamic(basicAuthCredential);
  }
    
  if (cacheEnabled != oldProps->cacheEnabled) {
    result["cacheEnabled"] = cacheEnabled;
  }
    
  if (incognito != oldProps->incognito) {
    result["incognito"] = incognito;
  }
    
  if (injectedJavaScript != oldProps->injectedJavaScript) {
    result["injectedJavaScript"] = injectedJavaScript;
  }
    
  if (injectedJavaScriptBeforeContentLoaded != oldProps->injectedJavaScriptBeforeContentLoaded) {
    result["injectedJavaScriptBeforeContentLoaded"] = injectedJavaScriptBeforeContentLoaded;
  }
    
  if (injectedJavaScriptForMainFrameOnly != oldProps->injectedJavaScriptForMainFrameOnly) {
    result["injectedJavaScriptForMainFrameOnly"] = injectedJavaScriptForMainFrameOnly;
  }
    
  if (injectedJavaScriptBeforeContentLoadedForMainFrameOnly != oldProps->injectedJavaScriptBeforeContentLoadedForMainFrameOnly) {
    result["injectedJavaScriptBeforeContentLoadedForMainFrameOnly"] = injectedJavaScriptBeforeContentLoadedForMainFrameOnly;
  }
    
  if (javaScriptCanOpenWindowsAutomatically != oldProps->javaScriptCanOpenWindowsAutomatically) {
    result["javaScriptCanOpenWindowsAutomatically"] = javaScriptCanOpenWindowsAutomatically;
  }
    
  if (javaScriptEnabled != oldProps->javaScriptEnabled) {
    result["javaScriptEnabled"] = javaScriptEnabled;
  }
    
  if (webviewDebuggingEnabled != oldProps->webviewDebuggingEnabled) {
    result["webviewDebuggingEnabled"] = webviewDebuggingEnabled;
  }
    
  if (mediaPlaybackRequiresUserAction != oldProps->mediaPlaybackRequiresUserAction) {
    result["mediaPlaybackRequiresUserAction"] = mediaPlaybackRequiresUserAction;
  }
    
  if (messagingEnabled != oldProps->messagingEnabled) {
    result["messagingEnabled"] = messagingEnabled;
  }
    
  if (hasOnOpenWindowEvent != oldProps->hasOnOpenWindowEvent) {
    result["hasOnOpenWindowEvent"] = hasOnOpenWindowEvent;
  }
    
  if (showsHorizontalScrollIndicator != oldProps->showsHorizontalScrollIndicator) {
    result["showsHorizontalScrollIndicator"] = showsHorizontalScrollIndicator;
  }
    
  if (showsVerticalScrollIndicator != oldProps->showsVerticalScrollIndicator) {
    result["showsVerticalScrollIndicator"] = showsVerticalScrollIndicator;
  }
    
  if (newSource != oldProps->newSource) {
    result["newSource"] = toDynamic(newSource);
  }
    
  if (userAgent != oldProps->userAgent) {
    result["userAgent"] = userAgent;
  }
    
  if (injectedJavaScriptObject != oldProps->injectedJavaScriptObject) {
    result["injectedJavaScriptObject"] = injectedJavaScriptObject;
  }
  return result;
}
#endif

} // namespace facebook::react
